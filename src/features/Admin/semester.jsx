import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
} from "@mui/material";
import axios from "axios"; // Ensure axios is installed
import { BaseUri } from "../../constants/uri";
import toast, { Toaster } from "react-hot-toast";
import useEmail from "../auth/email";
import useSemester from "../../hooks/useSemester";
import enToBn from "../en-to-bn/en-to-bn";

const Semester = () => {
  const [open, setOpen] = useState(false);
  const email = useEmail();
  const [formData, setFormData] = useState({
    email: email,
    semesterNo: "",
    creditNo: "",
    sgpa: "",
    tuitionFee: "",
    regFee: "",
  });

  const { data, refetch } = useSemester();

  const semesters = data?.data || [];

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleAddSemester = async () => {
    const tuitionFee60 = parseFloat(formData.tuitionFee) * 0.6;
    const totalTuitionFee = formData?.tuitionFee - tuitionFee60;

    const newSemester = {
      email: email,
      semesterNo: formData.semesterNo,
      creditNo: parseInt(formData.creditNo),
      sgpa: parseFloat(formData.sgpa),
      tuitionFee: totalTuitionFee,
      regFee: parseFloat(formData.regFee),
    };

    setFormData({
      semesterNo: "",
      creditNo: "",
      sgpa: "",
      tuitionFee: "",
      regFee: "",
    });
    setOpen(false);

    try {
      const response = await axios.post(
        `${BaseUri}/api/v1/semester/create`,
        newSemester
      );
      if (response.status === 200) {
        toast.success("‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
        refetch();
      }
    } catch (error) {
      console.error("‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:", error);
    }
  };

  const totalDue = semesters.reduce(
    (acc, cur) => acc + cur.tuitionFee + cur.regFee,
    0
  );

  const handleDelete = async (id) => {
    try {
      await axios.delete(`${BaseUri}/api/v1/semester/delete/${id}`);
      toast.success("üóëÔ∏è ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
      refetch();
    } catch (err) {
      toast.error("‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
      console.error(err);
    }
  };

  const calculateCGPA = () => {
    let cgpas = [];
    for (let i = 0; i < semesters.length; i += 3) {
      const group = semesters.slice(i, i + 3);
      if (group.length === 3) {
        const avg =
          group.reduce((sum, sem) => sum + sem.sgpa, 0) / group.length;
        cgpas.push({ index: i + 1, cgpa: avg.toFixed(2) });
      }
    }
    return cgpas;
  };

  return (
    <div className="p-4">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-4">
        <h2 className="text-xl font-bold mb-2 sm:mb-0">‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ</h2>
        <div className="flex flex-col sm:flex-row items-center">
          <span className="text-red-500 font-semibold mr-4">
            ‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö : {enToBn(totalDue.toFixed(2))} ‡¶ü‡¶æ‡¶ï‡¶æ
          </span>
          <Button
            variant="contained"
            color="primary"
            onClick={() => setOpen(true)}
          >
            ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
          </Button>
        </div>
      </div>

      <table className="w-full border text-center">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2">‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</th>
            <th className="border p-2">‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü</th>
            <th className="border p-2">SGPA</th>
            <th className="border p-2">‡ß¨‡ß¶% ‡¶ü‡¶ø‡¶â‡¶∂‡¶® ‡¶´‡¶ø</th>
            <th className="border p-2">‡¶∞‡ßá‡¶ú‡¶ø: ‡¶´‡¶ø</th>
            <th className="border p-2">‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ</th>
            <th className="border p-2">‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®</th>
          </tr>
        </thead>
        <tbody>
          {semesters.map((sem, idx) => (
            <tr key={idx}>
              <td className="border p-2">{enToBn(sem.semesterNo)}</td>
              <td className="border p-2">{enToBn(sem.creditNo)}</td>
              <td className="border p-2">{enToBn(sem.sgpa)}</td>
              <td className="border p-2">{enToBn(sem.tuitionFee)} ‡ß≥</td>
              <td className="border p-2">{enToBn(sem.regFee)} ‡ß≥</td>
              <td className="border p-2">
                {enToBn(sem.regFee + sem?.tuitionFee)} ‡ß≥
              </td>
              <td className="border p-2">
                <button
                  onClick={() => handleDelete(sem._id)}
                  className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                >
                  ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="mt-6">
        <h3 className="text-lg font-semibold mb-2">‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß© ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßá CGPA</h3>
        <ul className="list-disc ml-5">
          {calculateCGPA().map((cg, idx) => (
            <li key={idx}>
              ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ {cg.index} - {cg.index + 2}: CGPA = {cg.cgpa}
            </li>
          ))}
        </ul>
      </div>

      <div>
        <Dialog open={open} onClose={() => setOpen(false)}>
          <DialogTitle className="lg:w-96">‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø</DialogTitle>
          <DialogContent className="flex flex-col gap-4 mt-2">
            <TextField
              name="semesterNo"
              label="‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
              variant="outlined"
              value={formData.semesterNo}
              onChange={handleChange}
            />
            <TextField
              name="creditNo"
              label="‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
              type="number"
              variant="outlined"
              value={formData.creditNo}
              onChange={handleChange}
            />
            <TextField
              name="sgpa"
              label="SGPA"
              type="number"
              variant="outlined"
              value={formData.sgpa}
              onChange={handleChange}
            />
            <TextField
              name="tuitionFee"
              label="‡¶ü‡¶ø‡¶â‡¶∂‡¶® ‡¶´‡¶ø (‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó)"
              type="number"
              variant="outlined"
              value={formData.tuitionFee}
              onChange={handleChange}
            />
            <TextField
              name="regFee"
              label="‡¶∞‡ßá‡¶ú‡¶ø: ‡¶´‡¶ø"
              type="number"
              variant="outlined"
              value={formData.regFee}
              onChange={handleChange}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpen(false)}>‡¶¨‡¶æ‡¶§‡¶ø‡¶≤</Button>
            <Button variant="contained" onClick={handleAddSemester}>
              ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            </Button>
          </DialogActions>
        </Dialog>
      </div>
      <Toaster />
    </div>
  );
};

export default Semester;
