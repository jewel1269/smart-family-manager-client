import React, { useState } from "react";
import { useForm } from "react-hook-form";

const Grocery = () => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const [successMsg, setSuccessMsg] = useState("");
  const [image, setImage] = useState(null);

  const onSubmit = (data) => {
    console.log("ЁЯЫТ ржмрж╛ржЬрж╛рж░ рждржерзНржп:", data);
    setSuccessMsg("тЬЕ ржмрж╛ржЬрж╛рж░рзЗрж░ рждржерзНржп рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!");
    reset();
    setTimeout(() => setSuccessMsg(""), 4000);
  };

  const today = new Date().toISOString().split("T")[0];

  return (
    <div className="max-w-4xl mx-auto mt-10 p-6 bg-white shadow-2xl rounded-2xl">
      <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">
        ЁЯЫТ ржмрж╛ржЬрж╛рж░рзЗрж░ ржЬрж┐ржирж┐рж╕ржкрждрзНрж░ ржпрзЛржЧ ржХрж░рзБржи
      </h2>

      {successMsg && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6 text-center">
          {successMsg}
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">
            ЁЯУж ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо
          </label>
          <input
            type="text"
            {...register("title", { required: true })}
            placeholder="ржпрзЗржоржи: ржЪрж╛рж▓, ржбрж╛рж▓"
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
          />
          {errors.title && (
            <p className="text-red-500 text-sm mt-1">ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо ржЖржмрж╢рзНржпржХред</p>
          )}
        </div>

        {/* ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯУВ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐</label>
          <select
            {...register("category", { required: true })}
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
          >
            <option value="">-- ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи --</option>
            <option value="рж╕ржмржЬрж┐">рж╕ржмржЬрж┐</option>
            <option value="ржорж╕рж▓рзНрж▓рж╛">ржорж╕рж▓рзНрж▓рж╛</option>
            <option value="ржЧрзНрж░рзЛрж╕рж╛рж░рж┐">ржЧрзНрж░рзЛрж╕рж╛рж░рж┐</option>
            <option value="ржЕржирзНржпрж╛ржирзНржп">ржЕржирзНржпрж╛ржирзНржп</option>
          </select>
          {errors.category && (
            <p className="text-red-500 text-sm mt-1">ржПржХржЯрж┐ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред</p>
          )}
        </div>

        {/* ржорзВрж▓рзНржп */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯТ░ ржорзВрж▓рзНржп (рз│)</label>
          <input
            type="number"
            {...register("price", { required: true, min: 1 })}
            placeholder="рз│ ржХржд ржЯрж╛ржХрж╛"
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
          />
          {errors.price && (
            <p className="text-red-500 text-sm mt-1">рж╕ржарж┐ржХ ржорзВрж▓рзНржп ржжрж┐ржиред</p>
          )}
        </div>

        {/* ржХрж╕рзНржЯ ржжрж╛рждрж╛ */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯзНтАНтЩВя╕П ржХрзЗ ржХрж┐ржирзЗржЫрзЗ?</label>
          <input
            type="text"
            {...register("buyer", { required: true })}
            placeholder="ржпрзЗржоржи: ржЖржмрзНржмрзБ, ржЖржорзНржорзБ, ржЖржорж┐"
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
          />
          {errors.buyer && (
            <p className="text-red-500 text-sm mt-1">ржмрзНржпржХрзНрждрж┐рж░ ржирж╛ржо рж▓рж┐ржЦрзБржиред</p>
          )}
        </div>

        {/* рждрж╛рж░рж┐ржЦ */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯУЕ ржХрзЗржирж╛рж░ рждрж╛рж░рж┐ржЦ</label>
          <input
            type="date"
            defaultValue={today}
            {...register("date", { required: true })}
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
          />
          {errors.date && (
            <p className="text-red-500 text-sm mt-1">рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред</p>
          )}
        </div>

        {/* ржирзЛржЯ */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯУЭ ржирзЛржЯ</label>
          <textarea
            {...register("note")}
            placeholder="ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рждржерзНржп рж▓рж┐ржЦрзБржи (ржРржЪрзНржЫрж┐ржХ)"
            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring focus:ring-green-400"
            rows={3}
          />
        </div>

        {/* ржЫржмрж┐ */}
        <div>
          <label className="block text-gray-700 font-medium mb-1">ЁЯУ╖ ржЫржмрж┐ (ржРржЪрзНржЫрж┐ржХ)</label>
          <input
            type="file"
            {...register("attachment")}
            className="w-full"
            onChange={(e) => {
              if (e.target.files[0]) {
                setImage(e.target.files[0]);
              }
            }}
          />
        </div>

        {image && (
          <img
            src={URL.createObjectURL(image)}
            alt="Attachment Preview"
            className="mt-2 w-32 h-32 object-cover rounded-lg"
          />
        )}

        {/* рж╕рж╛ржмржорж┐ржЯ */}
        <div className="text-center">
          <button
            type="submit"
            className="bg-green-600 hover:bg-green-700 text-white font-semibold px-8 py-2 rounded-lg transition-all duration-300"
          >
            тЬЕ ржмрж╛ржЬрж╛рж░ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи
          </button>
        </div>
      </form>
    </div>
  );
};

export default Grocery;